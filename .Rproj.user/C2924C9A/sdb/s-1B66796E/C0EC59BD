{
    "collab_server" : "",
    "contents" : "---\ntitle: \"R Notebook\"\noutput: html_notebook\n---\n```{r}\ninstall.packages(\"automap\")\n```\n\n\n```{r}\nlibrary(insol)\nlibrary(maptools)\nlibrary(maps)\nlibrary(raster)\nlibrary(colorRamps)\nlibrary(rgdal)\nlibrary(sp)\nlibrary(animation)\nlibrary(dismo)\nlibrary(deldir)\nlibrary(rgeos)\nlibrary(gstat)\nlibrary(automap)\n```\n\n```{r}\nstates <- readShapePoly(\"cb_2016_us_state_500k/cb_2016_us_state_500k.shp\")\n```\n\n```{r}\nmo_data <- read.csv(\"missouri.csv\", as.is = TRUE)\n\nfor(i in 1:10){\nmo_data[which(mo_data[,i] == \"-9999\"),i] <- NA\n}\n\nmo_dd <- ((((mo_data[,8])-(mo_data[,9]))/2) - 65)\n\nmo_dd[which(mo_dd < 0)] = NA\n\nmo_t_dd <- cbind(mo_data, mo_dd)\n\nmo_t_dd <- data.frame(mo_t_dd)\nclass(mo_t_dd[,8]) <- \"numeric\"\nclass(mo_t_dd[,9]) <- \"numeric\"\nnonas <- mo_t_dd[which(is.na(mo_t_dd[,8])==FALSE | is.na(mo_t_dd[,9])==FALSE),]\nnonas <- nonas[which(is.na(nonas[,8])==FALSE & is.na(nonas[,9])==FALSE),]\n\ncoord <- coordinates((nonas[,5:4]))\npts <- SpatialPointsDataFrame(data =nonas, coords = coord, proj4string = CRS(\"+proj=longlat +datum=WGS84\"))\n\ntimeobject <- strptime(mo_t_dd[,6], format = \"%Y%m%d\")\ndates <- format(timeobject, format = \"%d %B %Y\")\n```\n\n```{r}\nColor <- heat.colors(100)[as.numeric(cut(pts$TMAX, breaks = 100))]\n```\n\n```{r}\nsaveGIF({\nfor (i in 1:30){\nplot(states, xlim=c(-96, -88), ylim=c(35, 41))\nplot(pts[which(pts$DATE == (20140600 + i)),], add = T, pch = 16, cex = 1, col = Color)\nmtext(paste(dates[i]), 1, line = -20)\n}\n}, movie.name = \"missouri.gif\", ani.width = 600, ani.height = 400 )\n```\n\n```{r}\nmin(mo_t_dd[,8], na.rm = TRUE)\n\n#values function --> assign nas\n\nmissouri <- states[which(states$NAME == \"Missouri\"),]\n\nTA <- CRS(\"+proj=aea +lat_1=34 +lat_2=40.5 +lat_0=0 +lon_0=-120 +x_0=0 +y_0=-4000000 +datum=NAD83 +units=m +ellps=GRS80 +towgs84=0,0,0\")\n\nsaveGIF({\nfor(i in 1:30){\nv <- voronoi(pts[which(pts$DATE == (20140600 + i)),])\nmasked <- intersect(v, missouri)\nnn_plot <- spplot(masked, \"TMAX\", at = seq(60,100,.5), main=list(label=dates[i],cex=1))\nprint(nn_plot)\n}\n}, movie.name = \"nearest_neighbor_mo.gif\", ani.width = 600, ani.height = 400)\n\nproj4string(missouri) <- TA\ndta <- spTransform(pts, TA)\ncata <- spTransform(missouri, TA)\n\nvr1 <- rasterize(masked, newraster, \"TMAX\")\nplot(vr1, xlim=c(-96, -88), ylim=c(35, 41))\n```\n\n```{r}\ncp <- rasterToPoints(vr1)\nd <- pointDistance(cp[,1:2], dta, lonlat = FALSE)\n```\n\n```{r}\nload(\"temp.1900.1950.0.5.CCSM4.Rdata\")\n```\n\n```{r}\nblankRaster <- MeanT_raster\nvalues(blankRaster) <- NA\n\nex <- extent(c(-73, -71, 42, 45))\nr <- crop(blankRaster, ex)\n\nnewraster <- raster(ncols = 1000, nrows = 1000, ex)\nextent(newraster) <- extent(missouri)\n\ncrs(newraster) <- TA\n\nmo_r <- rasterize(missouri, newraster)\n\nvr <- rasterize(pts, newraster, \"TMAX\")\nplot(vr, xlim=c(-96, -88), ylim=c(35, 41))\nplot(missouri, add = T)\nspplot(vr, xlim=c(-96, -88), ylim=c(35, 41))\n\n\ni <- 5\nsaveGIF({\nfor(i in 1:30){\n  \n  grd <- as.data.frame(spsample(dta, \"regular\", n=50000))\nnames(grd)       <- c(\"X\", \"Y\")\ncoordinates(grd) <- c(\"X\", \"Y\")\ngridded(grd)     <- TRUE  # Create SpatialPixel object\nfullgrid(grd)    <- TRUE  # Create SpatialGrid object\ncrs(grd) <- TA\n\n  gs <- gstat::idw(formula=TMAX~1, dta[which(dta$DATE == 20140600 + i),], newdata=grd, idp=5)\n  ridw <- raster(gs)\n  extent(ridw) <- missouri\n  mask2 <- mask(ridw, missouri)\n  idw_plot <- spplot(mask2, at = seq(60,100,.5), main=list(label=dates[i],cex=1))\nprint(idw_plot)\n}\n}, movie.name = \"IDW_mo.gif\", ani.width = 600, ani.height = 400)\n\n\nspplot(mask2)\n\nplot(mask2)\nplot(missouri, add = TRUE)\nplot(dta[which(dta$DATE == 20140605),], pch = 16, add = TRUE)\n\nplot(gs)\nplot(ridw)\n\n\nidwr <- mask(idw, missouri)\nplot(idwr, xlim=c(-96, -88), ylim=c(35, 41))\n\n\n```\n\n```{r}\n# Leave-one-out validation routine\nIDW.out <- vector(length = length(dta))\nfor(j in 1:30){\n  for (i in 1:length(dta)) {\n    IDW.out[i] <- idw(TMAX ~ 1, dta[-i,], dta[i,], idp=2.0)$var1.pred\n  }\n}\n\n# Plot the differences\nOP <- par(pty=\"s\", mar=c(4,3,0,0))\n  plot(IDW.out ~ dta$TMAX, asp=1, xlab=\"Observed\", ylab=\"Predicted\", pch=16,\n       col=rgb(0,0,0,0.5))\n  abline(lm(IDW.out ~ dta$TMAX), col=\"red\", lw=2,lty=2)\n  abline(0,1)\npar(OP)\n```\n\n```{r}\nlistofdates <- c(\"20140601\":\"20140630\")\n\nj <- 20140601\n\nfor (j in listofdates){\n  \nday_temp <- dta[which(dta$DATE == j),]\n\n# Create the interpolated surface\nimg <- gstat::idw(formula=TMAX~1, dta[which(dta$DATE == 20140601),], newdata=grd, idp=5)\nn   <- length(day_temp)\nZi  <- matrix(nrow = length(img$var1.pred), ncol = n)\n\n# Remove a point then interpolate (do this n times for each point)\nst <- stack()\n\n  for (i in 1:n){\n    Z1 <- gstat::idw(TMAX~1, dta[-i,], newdata=grd, idp=5)\n    st <- addLayer(st,raster(Z1,layer=1))\n    # Calculated pseudo-value Z at j\n    Zi[,i] <- n * img$var1.pred - (n-1) * Z1$var1.pred\n  }\n\n  # Jackknife estimator of parameter Z at location j\n  Zj <- as.matrix(apply(Zi, 1, sum, na.rm=T) / n )\n  \n  # Compute (Zi* - Zj)^2\n  c1 <- apply(Zi,2,'-',Zj)            # Compute the difference\n  c1 <- apply(c1^2, 1, sum, na.rm=T ) # Sum the square of the difference\n  \n  # Compute the confidence interval\n  CI <- sqrt( 1/(n*(n-1)) * c1)\n  \n  # Create (CI / interpolated value) raster\n  img.sig   <- img\n  img.sig$v <- CI /img$var1.pred \n  \n  # Clip the confidence raster to Texas\n  r <- raster(img.sig, layer=\"v\")\n  r.m <- mask(r, W)\n  \n  # Plot the map\n  tm_shape(r.m) + tm_raster(n=7,title=\"95% confidence interval \\n(in inches)\") +\n    tm_shape(P) + tm_dots(size=0.2) +\n    tm_legend(legend.outside=TRUE)\n}\n```\n\n\n\n\n\n\n\n\n```{r}\n\ngs <- gstat(formula=TMAX~1, locations=dta[which(dta$DATE == 20140605),])\n\nv <- variogram(gs, width=20)\n\nhead(v)\n\nplot(v)\n\nfve <- fit.variogram(v, vgm(85, \"Sph\", 75, 20))\nfve\n\nplot(variogramLine(fve, 400), type='l', ylim=c(0,120))\npoints(v[,2:3], pch=20, col='red')\n\nplot(v, fve)\n\ng <- as(newraster, 'SpatialGrid')\n\nk <- gstat(formula=TMAX~1, locations=dta[which(dta$DATE == 20140605),], model=fve)\nkp <- predict(k, g)\n\nspplot(kp)\n\nok <- brick(kp)\nok <- mask(ok, missouri)\nnames(ok) <- c('prediction', 'variance')\nplot(ok)\n```\n\n\n```{r}\nmogrid <- missouri\n\nkriging <- autoKrige(TMAX~1,dta[which(dta$DATE == 20140605),])\n\n\nkcrop <- crop(kriging, missouri)\n\nplot(kriging)\n```\n\n",
    "created" : 1497017528629.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4001271615",
    "id" : "C0EC59BD",
    "lastKnownWriteTime" : 1497284746,
    "last_content_update" : 1497284828002,
    "path" : "~/RDirectory/Summer/interpolation take 2.Rmd",
    "project_path" : "interpolation take 2.Rmd",
    "properties" : {
        "chunk_output_type" : "inline",
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}